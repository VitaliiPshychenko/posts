{"version":3,"sources":["redux/actions.js","redux/reducers.js","components/ListAllPosts.js","components/ListAllPostsHandler.js","components/NewCommentHandler.js","components/NewComment.js","components/Comments.js","components/PostPage.js","components/PostPageHandler.js","App.js","index.js"],"names":["LOAD_POSTS","LOAD_POST_WITH_COMMENTS","CHANGE_INPUT_VALUE","loadPosts","url","dispatch","fetch","then","response","json","listAllPosts","type","initialState","postWithComments","commentBody","id","ListAllPosts","this","props","requestList","react_default","a","createElement","className","map","post","key","title","body","react_router_dom","to","Component","ListAllPostsHandler","connect","state","NewCommentHandler","changeInputValue","value","onChange","event","target","Comments","components_NewCommentHandler","PostPage","_this$props","find","PostPageHandler","ownProps","match","params","post_id","store","createStore","arguments","length","undefined","action","Object","objectSpread","applyMiddleware","thunk","App","es","react_router","path","exact","component","ReactDOM","render","src_App","document","getElementById"],"mappings":"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","file":"static/js/main.cc4ab50e.chunk.js","sourcesContent":["export const LOAD_POSTS = 'load_posts';\nexport const LOAD_POST_WITH_COMMENTS = 'load_post_with_comments';\nexport const CHANGE_INPUT_VALUE = 'change_input_value';\nexport const EDIT_POST = 'edit_post';\n\nexport function loadPosts(url) {\n  return dispatch => {\n    fetch(url)\n      .then(response => response.json())\n      .then(listAllPosts => {\n        dispatch({\n          type: LOAD_POSTS,\n          listAllPosts,\n        });\n      });\n  };\n}\n\nexport function loadPostWithComments(url) {\n  return dispatch => {\n    fetch(url)\n      .then(response => response.json())\n      .then(postWithComments => {\n        dispatch({\n          type: LOAD_POST_WITH_COMMENTS,\n          postWithComments,\n        });\n      });\n  };\n}\n\nexport function changeInputValue(value) {\n  return {\n    type: CHANGE_INPUT_VALUE,\n    value,\n  };\n}\n\nexport function editPost() {\n  return {\n    type: EDIT_POST,\n  };\n}\n","import {\n  LOAD_POSTS,\n  LOAD_POST_WITH_COMMENTS,\n  CHANGE_INPUT_VALUE,\n} from './actions';\n\nconst initialState = {\n  listAllPosts: null,\n  postWithComments: null,\n  commentBody: '',\n  id: null,\n};\n\nexport default function reducer(state = initialState, action) {\n  switch (action.type) {\n    case LOAD_POSTS:\n      return {\n        ...state,\n        listAllPosts: action.listAllPosts,\n      };\n\n    case LOAD_POST_WITH_COMMENTS:\n      return {\n        ...state,\n        postWithComments: action.postWithComments,\n      };\n\n    case CHANGE_INPUT_VALUE:\n      return {\n        ...state,\n        commentBody: action.value,\n      };\n\n    default:\n      return state;\n  }\n}\n","import React, { Component } from 'react';\nimport { Link } from 'react-router-dom';\n\nexport default class ListAllPosts extends Component {\n  componentDidMount() {\n    this.props.requestList('https://simple-blog-api.crew.red/posts');\n  }\n\n  render() {\n    const { listAllPosts } = this.props;\n\n    if (listAllPosts === null) {\n      return <p>Loading...</p>;\n    }\n\n    return (\n      <div className=\"posts-container\">\n        {listAllPosts.map(post => {\n          return (\n            <article className=\"post\" key={post.id}>\n              <h2>{post.title}</h2>\n              <p>{post.body}</p>\n              <Link to={'/posts/' + post.id}>\n                <span>Show details</span>\n              </Link>\n            </article>\n          );\n        })}\n      </div>\n    );\n  }\n}\n","import { connect } from 'react-redux';\nimport { loadPosts } from '../redux/actions';\nimport ListAllPosts from './ListAllPosts';\n\nfunction mapStateToProps(state) {\n  return {\n    listAllPosts: state.listAllPosts,\n  };\n}\n\nfunction mapDispatchToProps(dispatch) {\n  return {\n    requestList: url => dispatch(loadPosts(url)),\n  };\n}\n\nconst ListAllPostsHandler = connect(\n  mapStateToProps,\n  mapDispatchToProps,\n)(ListAllPosts);\n\nexport default ListAllPostsHandler;\n","import { connect } from 'react-redux';\nimport NewComment from './NewComment';\nimport { changeInputValue } from '../redux/actions';\n\nfunction mapStateToProps(state) {\n  return {\n    commentBody: state.commentBody,\n  };\n}\n\nfunction mapDispatchToProps(dispatch) {\n  return {\n    changeInputValue: commentBody => dispatch(changeInputValue(commentBody)),\n  };\n}\n\nconst NewCommentHandler = connect(\n  mapStateToProps,\n  mapDispatchToProps,\n)(NewComment);\n\nexport default NewCommentHandler;\n","import React from 'react';\n\nexport default function NewComment(props) {\n  const { commentBody, changeInputValue } = props;\n\n  return (\n    <form className=\"comment-form\">\n      <textarea\n        className=\"comment-form__text\"\n        value={commentBody}\n        onChange={event => changeInputValue(event.target.value)}\n      />\n      <input className=\"comment-form__btn\" type=\"submit\" value=\"Public\" />\n    </form>\n  );\n}\n","import React from 'react';\nimport NewCommentHandler from './NewCommentHandler';\n\nexport default function Comments(props) {\n  return (\n    <div>\n      <div>Comments map from props.comments</div>\n      <NewCommentHandler />\n    </div>\n  );\n}\n","import React, { Component } from 'react';\nimport Comments from './Comments';\n\nexport default class PostPage extends Component {\n  componentDidMount() {\n    this.props.requestList('https://simple-blog-api.crew.red/posts');\n  }\n\n  render() {\n    const { listAllPosts, id } = this.props;\n    const post = listAllPosts.find(post => post.id === +id);\n\n    if (!post) {\n      return <p>Loading...</p>;\n    }\n\n    return (\n      <article className=\"post\">\n        <h2>{post.title}</h2>\n        <p>{post.body}</p>\n        <Comments id={post.id} />\n      </article>\n    );\n  }\n}\n","import { connect } from 'react-redux';\nimport { loadPosts } from '../redux/actions';\nimport PostPage from './PostPage';\n\nfunction mapStateToProps(state, ownProps) {\n  return {\n    listAllPosts: state.listAllPosts,\n    id: ownProps.match.params.post_id,\n  };\n}\n\nfunction mapDispatchToProps(dispatch) {\n  return {\n    requestList: url => dispatch(loadPosts(url)),\n  };\n}\n\nconst PostPageHandler = connect(\n  mapStateToProps,\n  mapDispatchToProps,\n)(PostPage);\n\nexport default PostPageHandler;\n","import React from 'react';\nimport './App.css';\nimport { Provider } from 'react-redux';\nimport { createStore, applyMiddleware } from 'redux';\nimport { BrowserRouter as Router, Route, Link, Switch } from 'react-router-dom';\nimport thunk from 'redux-thunk';\nimport reducer from './redux/reducers';\nimport ListAllPostsHandler from './components/ListAllPostsHandler';\nimport PostPageHandler from './components/PostPageHandler';\n\nconst store = createStore(reducer, applyMiddleware(thunk));\n\nfunction App() {\n  return (\n    <Provider store={store}>\n      <Router>\n        <Link className=\"all-posts\" to=\"/LatestPosts\">\n          All posts\n        </Link>\n        <Switch>\n          <Route path=\"/LatestPosts\" exact component={ListAllPostsHandler} />\n          <Route path=\"/posts/:post_id\" component={PostPageHandler} />\n        </Switch>\n      </Router>\n    </Provider>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}